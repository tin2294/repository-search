{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport createConnector from \"../core/createConnector.js\";\nimport { getResults } from \"../core/indexUtils.js\";\n\nfunction inferPayload(_ref) {\n  var method = _ref.method,\n      results = _ref.results,\n      currentHit = _ref.currentHit;\n  var index = results.index;\n  var queryID = currentHit.__queryID;\n  var objectIDs = [currentHit.objectID];\n\n  if (!queryID) {\n    throw new Error(\"Could not infer `queryID`. Ensure `clickAnalytics: true` was added with the Configure widget.\\nSee: https://alg.li/VpPpLt\");\n  }\n\n  switch (method) {\n    case 'clickedObjectIDsAfterSearch':\n      {\n        var positions = [currentHit.__position];\n        return {\n          index: index,\n          queryID: queryID,\n          objectIDs: objectIDs,\n          positions: positions\n        };\n      }\n\n    case 'convertedObjectIDsAfterSearch':\n      return {\n        index: index,\n        queryID: queryID,\n        objectIDs: objectIDs\n      };\n\n    default:\n      throw new Error(\"Unsupported method \\\"\".concat(method, \"\\\" passed to the insights function. The supported methods are: \\\"clickedObjectIDsAfterSearch\\\", \\\"convertedObjectIDsAfterSearch\\\".\"));\n  }\n}\n\nvar wrapInsightsClient = function wrapInsightsClient(aa, results, currentHit) {\n  return function (method, payload) {\n    if (typeof aa !== 'function') {\n      throw new TypeError(\"Expected insightsClient to be a Function\");\n    }\n\n    var inferredPayload = inferPayload({\n      method: method,\n      results: results,\n      currentHit: currentHit\n    });\n    aa(method, _objectSpread(_objectSpread({}, inferredPayload), payload));\n  };\n};\n\nexport default (function (insightsClient) {\n  return createConnector({\n    displayName: 'AlgoliaInsights',\n    getProvidedProps: function getProvidedProps(props, _, searchResults) {\n      var results = getResults(searchResults, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      });\n      var insights = wrapInsightsClient(insightsClient, results, props.hit);\n      return {\n        insights: insights\n      };\n    }\n  });\n});","map":{"version":3,"sources":["/Users/tingting/code/tin2294/repository-search/node_modules/react-instantsearch-core/dist/es/connectors/connectHitInsights.js"],"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","createConnector","getResults","inferPayload","_ref","method","results","currentHit","index","queryID","__queryID","objectIDs","objectID","Error","positions","__position","concat","wrapInsightsClient","aa","payload","TypeError","inferredPayload","insightsClient","displayName","getProvidedProps","props","_","searchResults","ais","contextValue","multiIndexContext","indexContextValue","insights","hit"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,2CAA5B;;AAEA,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,cAAzB,EAAyC;AAAE,MAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYF,MAAZ,CAAX;;AAAgC,MAAIG,MAAM,CAACC,qBAAX,EAAkC;AAAE,QAAIC,OAAO,GAAGF,MAAM,CAACC,qBAAP,CAA6BJ,MAA7B,CAAd;;AAAoD,QAAIC,cAAJ,EAAoB;AAAEI,MAAAA,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,UAAUC,GAAV,EAAe;AAAE,eAAOJ,MAAM,CAACK,wBAAP,CAAgCR,MAAhC,EAAwCO,GAAxC,EAA6CE,UAApD;AAAiE,OAAjG,CAAV;AAA+G;;AAACP,IAAAA,IAAI,CAACQ,IAAL,CAAUC,KAAV,CAAgBT,IAAhB,EAAsBG,OAAtB;AAAiC;;AAAC,SAAOH,IAAP;AAAc;;AAEzV,SAASU,aAAT,CAAuBC,MAAvB,EAA+B;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAT,IAAgB,IAAhB,GAAuBC,SAAS,CAACD,CAAD,CAAhC,GAAsC,EAAnD;;AAAuD,QAAIA,CAAC,GAAG,CAAR,EAAW;AAAEf,MAAAA,OAAO,CAACI,MAAM,CAACc,MAAD,CAAP,EAAiB,IAAjB,CAAP,CAA8BC,OAA9B,CAAsC,UAAUC,GAAV,EAAe;AAAErB,QAAAA,eAAe,CAACe,MAAD,EAASM,GAAT,EAAcF,MAAM,CAACE,GAAD,CAApB,CAAf;AAA4C,OAAnG;AAAuG,KAApH,MAA0H,IAAIhB,MAAM,CAACiB,yBAAX,EAAsC;AAAEjB,MAAAA,MAAM,CAACkB,gBAAP,CAAwBR,MAAxB,EAAgCV,MAAM,CAACiB,yBAAP,CAAiCH,MAAjC,CAAhC;AAA4E,KAApH,MAA0H;AAAElB,MAAAA,OAAO,CAACI,MAAM,CAACc,MAAD,CAAP,CAAP,CAAwBC,OAAxB,CAAgC,UAAUC,GAAV,EAAe;AAAEhB,QAAAA,MAAM,CAACmB,cAAP,CAAsBT,MAAtB,EAA8BM,GAA9B,EAAmChB,MAAM,CAACK,wBAAP,CAAgCS,MAAhC,EAAwCE,GAAxC,CAAnC;AAAmF,OAApI;AAAwI;AAAE;;AAAC,SAAON,MAAP;AAAgB;;AAEthB,OAAOU,eAAP,MAA4B,4BAA5B;AACA,SAASC,UAAT,QAA2B,uBAA3B;;AAEA,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AAC1B,MAAIC,MAAM,GAAGD,IAAI,CAACC,MAAlB;AAAA,MACIC,OAAO,GAAGF,IAAI,CAACE,OADnB;AAAA,MAEIC,UAAU,GAAGH,IAAI,CAACG,UAFtB;AAGA,MAAIC,KAAK,GAAGF,OAAO,CAACE,KAApB;AACA,MAAIC,OAAO,GAAGF,UAAU,CAACG,SAAzB;AACA,MAAIC,SAAS,GAAG,CAACJ,UAAU,CAACK,QAAZ,CAAhB;;AAEA,MAAI,CAACH,OAAL,EAAc;AACZ,UAAM,IAAII,KAAJ,CAAU,2HAAV,CAAN;AACD;;AAED,UAAQR,MAAR;AACE,SAAK,6BAAL;AACE;AACE,YAAIS,SAAS,GAAG,CAACP,UAAU,CAACQ,UAAZ,CAAhB;AACA,eAAO;AACLP,UAAAA,KAAK,EAAEA,KADF;AAELC,UAAAA,OAAO,EAAEA,OAFJ;AAGLE,UAAAA,SAAS,EAAEA,SAHN;AAILG,UAAAA,SAAS,EAAEA;AAJN,SAAP;AAMD;;AAEH,SAAK,+BAAL;AACE,aAAO;AACLN,QAAAA,KAAK,EAAEA,KADF;AAELC,QAAAA,OAAO,EAAEA,OAFJ;AAGLE,QAAAA,SAAS,EAAEA;AAHN,OAAP;;AAMF;AACE,YAAM,IAAIE,KAAJ,CAAU,wBAAwBG,MAAxB,CAA+BX,MAA/B,EAAuC,oIAAvC,CAAV,CAAN;AApBJ;AAsBD;;AAED,IAAIY,kBAAkB,GAAG,SAASA,kBAAT,CAA4BC,EAA5B,EAAgCZ,OAAhC,EAAyCC,UAAzC,EAAqD;AAC5E,SAAO,UAAUF,MAAV,EAAkBc,OAAlB,EAA2B;AAChC,QAAI,OAAOD,EAAP,KAAc,UAAlB,EAA8B;AAC5B,YAAM,IAAIE,SAAJ,CAAc,0CAAd,CAAN;AACD;;AAED,QAAIC,eAAe,GAAGlB,YAAY,CAAC;AACjCE,MAAAA,MAAM,EAAEA,MADyB;AAEjCC,MAAAA,OAAO,EAAEA,OAFwB;AAGjCC,MAAAA,UAAU,EAAEA;AAHqB,KAAD,CAAlC;AAKAW,IAAAA,EAAE,CAACb,MAAD,EAASf,aAAa,CAACA,aAAa,CAAC,EAAD,EAAK+B,eAAL,CAAd,EAAqCF,OAArC,CAAtB,CAAF;AACD,GAXD;AAYD,CAbD;;AAeA,gBAAgB,UAAUG,cAAV,EAA0B;AACxC,SAAOrB,eAAe,CAAC;AACrBsB,IAAAA,WAAW,EAAE,iBADQ;AAErBC,IAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,CAAjC,EAAoCC,aAApC,EAAmD;AACnE,UAAIrB,OAAO,GAAGJ,UAAU,CAACyB,aAAD,EAAgB;AACtCC,QAAAA,GAAG,EAAEH,KAAK,CAACI,YAD2B;AAEtCC,QAAAA,iBAAiB,EAAEL,KAAK,CAACM;AAFa,OAAhB,CAAxB;AAIA,UAAIC,QAAQ,GAAGf,kBAAkB,CAACK,cAAD,EAAiBhB,OAAjB,EAA0BmB,KAAK,CAACQ,GAAhC,CAAjC;AACA,aAAO;AACLD,QAAAA,QAAQ,EAAEA;AADL,OAAP;AAGD;AAXoB,GAAD,CAAtB;AAaD,CAdD","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport createConnector from \"../core/createConnector.js\";\nimport { getResults } from \"../core/indexUtils.js\";\n\nfunction inferPayload(_ref) {\n  var method = _ref.method,\n      results = _ref.results,\n      currentHit = _ref.currentHit;\n  var index = results.index;\n  var queryID = currentHit.__queryID;\n  var objectIDs = [currentHit.objectID];\n\n  if (!queryID) {\n    throw new Error(\"Could not infer `queryID`. Ensure `clickAnalytics: true` was added with the Configure widget.\\nSee: https://alg.li/VpPpLt\");\n  }\n\n  switch (method) {\n    case 'clickedObjectIDsAfterSearch':\n      {\n        var positions = [currentHit.__position];\n        return {\n          index: index,\n          queryID: queryID,\n          objectIDs: objectIDs,\n          positions: positions\n        };\n      }\n\n    case 'convertedObjectIDsAfterSearch':\n      return {\n        index: index,\n        queryID: queryID,\n        objectIDs: objectIDs\n      };\n\n    default:\n      throw new Error(\"Unsupported method \\\"\".concat(method, \"\\\" passed to the insights function. The supported methods are: \\\"clickedObjectIDsAfterSearch\\\", \\\"convertedObjectIDsAfterSearch\\\".\"));\n  }\n}\n\nvar wrapInsightsClient = function wrapInsightsClient(aa, results, currentHit) {\n  return function (method, payload) {\n    if (typeof aa !== 'function') {\n      throw new TypeError(\"Expected insightsClient to be a Function\");\n    }\n\n    var inferredPayload = inferPayload({\n      method: method,\n      results: results,\n      currentHit: currentHit\n    });\n    aa(method, _objectSpread(_objectSpread({}, inferredPayload), payload));\n  };\n};\n\nexport default (function (insightsClient) {\n  return createConnector({\n    displayName: 'AlgoliaInsights',\n    getProvidedProps: function getProvidedProps(props, _, searchResults) {\n      var results = getResults(searchResults, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      });\n      var insights = wrapInsightsClient(insightsClient, results, props.hit);\n      return {\n        insights: insights\n      };\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}