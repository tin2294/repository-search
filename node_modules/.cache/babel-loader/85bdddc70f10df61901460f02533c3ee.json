{"ast":null,"code":"var _jsxFileName = \"/Users/tingting/code/tin2294/repository-search/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport './App.css'; // import SearchPage from './SearchPage';\n\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  cache: new InMemoryCache(),\n  headers: {\n    authorization: `Bearer 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`\n  }\n});\nconst GET_AVATAR = gql`\n  query {\n    viewer {\n      avatarUrl\n    }\n  }\n`;\n\nclass UserAvatar extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(Query, {\n      query: GET_AVATAR,\n      children: _ref => {\n        let {\n          loading,\n          error,\n          data\n        } = _ref;\n        if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 31\n        }, this);\n        if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Error :(\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 29\n        }, this);\n        return /*#__PURE__*/_jsxDEV(Avatar, {\n          url: data.viewer.avatarUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 18\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n\n} // const client = new ApolloClient({\n//   uri: 'https://48p1r2roz4.sse.codesandbox.io',\n//   cache: new InMemoryCache()\n// });\n\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My first Apollo app \\uD83D\\uDE80\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExchangeRates, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\n;\nReactDOM.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 65,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals(); // 1. Fetch info from API and organize (Fri morning)\n// 2. Implement Search Function and figure out what user is in: maybe a form? (Fri evening)\n// 3. Front end (Fri evening, Sat morning)\n// 4. Testing with an existing user, nonexisting user, and repos found and not found (Sat morning)\n// 5. Write README (Sun morning)\n// 6. Heroku (Sun morning)\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tingting/code/tin2294/repository-search/src/index.js"],"names":["React","ReactDOM","reportWebVitals","ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","client","uri","cache","headers","authorization","GET_AVATAR","UserAvatar","Component","render","loading","error","data","viewer","avatarUrl","App","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAO,WAAP,C,CACA;;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,GALF,QAMO,gBANP;;AASA,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,GAAG,EAAE,gCADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIN,aAAJ,EAFuB;AAG9BO,EAAAA,OAAO,EAAE;AACPC,IAAAA,aAAa,EAAG;AADT;AAHqB,CAAjB,CAAf;AAQA,MAAMC,UAAU,GAAGN,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA,CANA;;AAQA,MAAMO,UAAN,SAAyBd,KAAK,CAACe,SAA/B,CAAyC;AACvCC,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEH,UAAd;AAAA,gBACG,QAA8B;AAAA,YAA7B;AAAEI,UAAAA,OAAF;AAAWC,UAAAA,KAAX;AAAkBC,UAAAA;AAAlB,SAA6B;AAC7B,YAAIF,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACb,YAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,4BAAO,QAAC,MAAD;AAAQ,UAAA,GAAG,EAAEC,IAAI,CAACC,MAAL,CAAYC;AAAzB;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD;AANH;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AAbsC,C,CAgBzC;AACA;AACA;AACA;;;AAGA,SAASC,GAAT,GAAe;AACb,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAE,aAAF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;KAPQA,G;AAOR;AAGDrB,QAAQ,CAACe,MAAT,eACE,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAER,MAAxB;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEe,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAOA;AACA;AACA;;AACAtB,eAAe,G,CAGf;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport './App.css';\n// import SearchPage from './SearchPage';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql,\n} from \"@apollo/client\";\n\n\nconst client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  cache: new InMemoryCache(),\n  headers: {\n    authorization: `Bearer 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`\n  }\n});\n\nconst GET_AVATAR = gql`\n  query {\n    viewer {\n      avatarUrl\n    }\n  }\n`;\n\nclass UserAvatar extends React.Component {\n  render() {\n    return (\n      <Query query={GET_AVATAR}>\n        {({ loading, error, data }) => {\n          if (loading) return <div>Loading...</div>;\n          if (error) return <div>Error :(</div>;\n\n          return <Avatar url={data.viewer.avatarUrl} />;\n        }\n        }\n      </Query>\n    );\n  }\n}\n\n// const client = new ApolloClient({\n//   uri: 'https://48p1r2roz4.sse.codesandbox.io',\n//   cache: new InMemoryCache()\n// });\n\n\nfunction App() {\n  return (\n    <div>\n      <h2>My first Apollo app ðŸš€</h2>\n      < ExchangeRates />\n    </div>\n  );\n};\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n// 1. Fetch info from API and organize (Fri morning)\n// 2. Implement Search Function and figure out what user is in: maybe a form? (Fri evening)\n// 3. Front end (Fri evening, Sat morning)\n// 4. Testing with an existing user, nonexisting user, and repos found and not found (Sat morning)\n// 5. Write README (Sun morning)\n// 6. Heroku (Sun morning)\n"]},"metadata":{},"sourceType":"module"}