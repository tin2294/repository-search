{"ast":null,"code":"var _jsxFileName = \"/Users/tingting/code/tin2294/repository-search/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport './App.css';\nimport App from './App';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Connecting to the GitHub v4 API\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst token = process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN;\nconst client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  cache: new InMemoryCache(),\n  headers: {\n    authorization: `Bearer ${token}`\n  }\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 26,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals(); // [X] 1. Front end -> cards per repo (1-2pm)\n// [X] 2. Token situation (2-3pm)\n// [X] 3. Heroku (Sun morning) (4:30-5:30pm)\n// [X] 4. Write README & Pseudocode (Sun morning) (5:30-6pm)\n// [X] 5. Responsiveness\n// [ ] 6. Testing with an existing user, nonexisting user,\n//        and repos found and not found (Sat morning) (6-8:30pm)\n// [ ] 7. Refactor code & finish README\n// [ ] 8. Avatar of user (8:30-9:30pm)\n// [ ] 9. More Repo info","map":{"version":3,"sources":["/Users/tingting/code/tin2294/repository-search/src/index.js"],"names":["React","ReactDOM","reportWebVitals","App","ApolloClient","InMemoryCache","ApolloProvider","token","process","env","REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN","client","uri","cache","headers","authorization","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,cAHF,QAIO,gBAJP;AAKA,OAAO,sCAAP,C,CAEA;;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYC,sCAA1B;AAEA,MAAMC,MAAM,GAAG,IAAIP,YAAJ,CAAiB;AAC9BQ,EAAAA,GAAG,EAAE,gCADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIR,aAAJ,EAFuB;AAG9BS,EAAAA,OAAO,EAAE;AACPC,IAAAA,aAAa,EAAG,UAASR,KAAM;AADxB;AAHqB,CAAjB,CAAf;AAQAN,QAAQ,CAACe,MAAT,eACE,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEL,MAAxB;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEM,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAOA;AACA;AACA;;AACAhB,eAAe,G,CAGf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport './App.css';\nimport App from './App';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider\n} from \"@apollo/client\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Connecting to the GitHub v4 API\nconst token = process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN;\n\nconst client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  cache: new InMemoryCache(),\n  headers: {\n    authorization: `Bearer ${token}`\n  }\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n// [X] 1. Front end -> cards per repo (1-2pm)\n// [X] 2. Token situation (2-3pm)\n// [X] 3. Heroku (Sun morning) (4:30-5:30pm)\n// [X] 4. Write README & Pseudocode (Sun morning) (5:30-6pm)\n// [X] 5. Responsiveness\n// [ ] 6. Testing with an existing user, nonexisting user,\n//        and repos found and not found (Sat morning) (6-8:30pm)\n// [ ] 7. Refactor code & finish README\n// [ ] 8. Avatar of user (8:30-9:30pm)\n// [ ] 9. More Repo info\n"]},"metadata":{},"sourceType":"module"}