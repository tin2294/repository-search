{"ast":null,"code":"import PropTypes from 'prop-types';\nimport createConnector from \"../core/createConnector.js\";\nimport { getResults } from \"../core/indexUtils.js\";\nvar MAX_WILDCARD_FACETS = 20;\nexport default createConnector({\n  displayName: 'AlgoliaDynamicWidgets',\n  defaultProps: {\n    transformItems: function transformItems(items) {\n      return items;\n    },\n    maxValuesPerFacet: 20\n  },\n  propTypes: {\n    transformItems: PropTypes.func,\n    facets: PropTypes.arrayOf(PropTypes.string),\n    maxValuesPerFacet: PropTypes.number\n  },\n  getProvidedProps: function getProvidedProps(props, _searchState, searchResults) {\n    var results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n\n    if (props.facets && !(Array.isArray(props.facets) && props.facets.length <= 1 && (props.facets[0] === '*' || props.facets[0] === undefined))) {\n      throw new Error(\"The `facets` prop only accepts [] or [\\\"*\\\"], you passed \".concat(JSON.stringify(props.facets)));\n    }\n\n    if (!results) {\n      return {\n        attributesToRender: []\n      };\n    }\n\n    var facetOrder = results.renderingContent && results.renderingContent.facetOrdering && results.renderingContent.facetOrdering.facets && results.renderingContent.facetOrdering.facets.order || [];\n    var attributesToRender = props.transformItems(facetOrder, {\n      results: results\n    });\n\n    if (attributesToRender.length > MAX_WILDCARD_FACETS && !props.facets) {\n      // eslint-disable-next-line no-console\n      console.warn(\"More than \".concat(MAX_WILDCARD_FACETS, \" facets are requested to be displayed without explicitly setting which facets to retrieve. This could have a performance impact. Set \\\"facets\\\" to [] to do two smaller network requests, or explicitly to ['*'] to avoid this warning.\"));\n    }\n\n    if (props.maxValuesPerFacet < results._state.maxValuesPerFacet) {\n      // eslint-disable-next-line no-console\n      console.warn(\"The maxValuesPerFacet set by dynamic widgets (\".concat(props.maxValuesPerFacet, \") is smaller than one of the limits set by a widget (\").concat(results._state.maxValuesPerFacet, \"). This causes a mismatch in query parameters and thus an extra network request when that widget is mounted.\"));\n    }\n\n    return {\n      attributesToRender: attributesToRender\n    };\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props) {\n    return (props.facets || ['*']).reduce(function (acc, curr) {\n      return acc.addFacet(curr);\n    }, searchParameters.setQueryParameters({\n      maxValuesPerFacet: Math.max(props.maxValuesPerFacet || 0, searchParameters.maxValuesPerFacet || 0)\n    }));\n  }\n});","map":{"version":3,"sources":["/Users/tingting/code/tin2294/repository-search/node_modules/react-instantsearch-core/dist/es/connectors/connectDynamicWidgets.js"],"names":["PropTypes","createConnector","getResults","MAX_WILDCARD_FACETS","displayName","defaultProps","transformItems","items","maxValuesPerFacet","propTypes","func","facets","arrayOf","string","number","getProvidedProps","props","_searchState","searchResults","results","ais","contextValue","multiIndexContext","indexContextValue","Array","isArray","length","undefined","Error","concat","JSON","stringify","attributesToRender","facetOrder","renderingContent","facetOrdering","order","console","warn","_state","getSearchParameters","searchParameters","reduce","acc","curr","addFacet","setQueryParameters","Math","max"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport createConnector from \"../core/createConnector.js\";\nimport { getResults } from \"../core/indexUtils.js\";\nvar MAX_WILDCARD_FACETS = 20;\nexport default createConnector({\n  displayName: 'AlgoliaDynamicWidgets',\n  defaultProps: {\n    transformItems: function transformItems(items) {\n      return items;\n    },\n    maxValuesPerFacet: 20\n  },\n  propTypes: {\n    transformItems: PropTypes.func,\n    facets: PropTypes.arrayOf(PropTypes.string),\n    maxValuesPerFacet: PropTypes.number\n  },\n  getProvidedProps: function getProvidedProps(props, _searchState, searchResults) {\n    var results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n\n    if (props.facets && !(Array.isArray(props.facets) && props.facets.length <= 1 && (props.facets[0] === '*' || props.facets[0] === undefined))) {\n      throw new Error(\"The `facets` prop only accepts [] or [\\\"*\\\"], you passed \".concat(JSON.stringify(props.facets)));\n    }\n\n    if (!results) {\n      return {\n        attributesToRender: []\n      };\n    }\n\n    var facetOrder = results.renderingContent && results.renderingContent.facetOrdering && results.renderingContent.facetOrdering.facets && results.renderingContent.facetOrdering.facets.order || [];\n    var attributesToRender = props.transformItems(facetOrder, {\n      results: results\n    });\n\n    if (attributesToRender.length > MAX_WILDCARD_FACETS && !props.facets) {\n      // eslint-disable-next-line no-console\n      console.warn(\"More than \".concat(MAX_WILDCARD_FACETS, \" facets are requested to be displayed without explicitly setting which facets to retrieve. This could have a performance impact. Set \\\"facets\\\" to [] to do two smaller network requests, or explicitly to ['*'] to avoid this warning.\"));\n    }\n\n    if (props.maxValuesPerFacet < results._state.maxValuesPerFacet) {\n      // eslint-disable-next-line no-console\n      console.warn(\"The maxValuesPerFacet set by dynamic widgets (\".concat(props.maxValuesPerFacet, \") is smaller than one of the limits set by a widget (\").concat(results._state.maxValuesPerFacet, \"). This causes a mismatch in query parameters and thus an extra network request when that widget is mounted.\"));\n    }\n\n    return {\n      attributesToRender: attributesToRender\n    };\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props) {\n    return (props.facets || ['*']).reduce(function (acc, curr) {\n      return acc.addFacet(curr);\n    }, searchParameters.setQueryParameters({\n      maxValuesPerFacet: Math.max(props.maxValuesPerFacet || 0, searchParameters.maxValuesPerFacet || 0)\n    }));\n  }\n});"]},"metadata":{},"sourceType":"module"}