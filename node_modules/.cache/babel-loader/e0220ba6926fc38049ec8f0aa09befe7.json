{"ast":null,"code":"var _jsxFileName = \"/Users/tingting/code/tin2294/repository-search/src/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport './App.css';\nimport SearchBar from './search';\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  cache: new InMemoryCache(),\n  headers: {\n    authorization: `Bearer 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`\n  }\n});\nconst GET_REPOSITORIES = gql`\n   query repositories {\n    viewer {\n        login\n        repositories(first: 30) {\n            edges {\n                node {\n                name\n                }\n            }\n        }\n    }\n}\n`;\n\nconst filterRepos = (repos, query) => {\n  if (!query) {\n    return repos;\n  }\n\n  return repos.filter(repo => {\n    const repoName = repo.name.toLowerCase();\n    return repoName.includes(query);\n  });\n};\n\nfunction RepositoriesList() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_REPOSITORIES);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 21\n  }, this); // var repos = data.viewer.repositories.edges.map(({ node }) => (\n  //   {name: node.name}\n  //   ));\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: data.viewer.repositories.edges.map(_ref => {\n      let {\n        node\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: node.name\n      }, node.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RepositoriesList, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = RepositoriesList;\n;\n\nfunction GetRepos() {\n  _s2();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_REPOSITORIES);\n  if (loading) return;\n  if (error) return;\n  var repos = data.viewer.repositories.edges.map(_ref2 => {\n    let {\n      node\n    } = _ref2;\n    return {\n      name: node.name\n    };\n  });\n  return repos;\n}\n\n_s2(GetRepos, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c2 = GetRepos;\n;\n\nfunction App() {\n  const {\n    search\n  } = window.location;\n  const query = new URLSearchParams(search).get('s');\n  const repos1 = GetRepos();\n  console.log(repos1); // const filteredRepos = filterRepos(GetRepos(), query);\n\n  console.log(filteredRepos);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Repositories \\uD83D\\uDE80\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RepositoriesList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = App;\n;\nReactDOM.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 99,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals(); // 1. Fetch info from API and organize (Fri morning)\n// 2. Implement Search Function and figure out what user is in: maybe a form? (Fri evening)\n// 3. Front end (Fri evening, Sat morning)\n// 4. Testing with an existing user, nonexisting user, and repos found and not found (Sat morning)\n// 5. Write README (Sun morning)\n// 6. Heroku (Sun morning)\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"RepositoriesList\");\n$RefreshReg$(_c2, \"GetRepos\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/tingting/code/tin2294/repository-search/src/index.js"],"names":["React","ReactDOM","reportWebVitals","SearchBar","ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","client","uri","cache","headers","authorization","GET_REPOSITORIES","filterRepos","repos","query","filter","repo","repoName","name","toLowerCase","includes","RepositoriesList","loading","error","data","viewer","repositories","edges","map","node","GetRepos","App","search","window","location","URLSearchParams","get","repos1","console","log","filteredRepos","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport './App.css';\nimport SearchBar from './search';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql,\n} from \"@apollo/client\";\n\n\nconst client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  cache: new InMemoryCache(),\n  headers: {\n    authorization: `Bearer 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`\n  }\n});\n\nconst GET_REPOSITORIES = gql`\n   query repositories {\n    viewer {\n        login\n        repositories(first: 30) {\n            edges {\n                node {\n                name\n                }\n            }\n        }\n    }\n}\n`;\n\n\nconst filterRepos = (repos, query) => {\n  if (!query) {\n    return repos;\n  }\n\n  return repos.filter((repo) => {\n    const repoName = repo.name.toLowerCase();\n    return repoName.includes(query);\n  });\n};\n\nfunction RepositoriesList() {\n  const { loading, error, data } = useQuery(GET_REPOSITORIES);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n  // var repos = data.viewer.repositories.edges.map(({ node }) => (\n  //   {name: node.name}\n  //   ));\n  return (\n    <ul>\n      {data.viewer.repositories.edges.map(({ node }) => (\n        <li key={node.name}>{node.name}</li>\n      ))}\n    </ul>\n  );\n};\n\nfunction GetRepos() {\n  const { loading, error, data } = useQuery(GET_REPOSITORIES);\n  if (loading) return;\n  if (error) return;\n  var repos = data.viewer.repositories.edges.map(({ node }) => (\n    { name: node.name }\n  ));\n  return (\n    repos\n  );\n};\n\n\n\nfunction App() {\n  const { search } = window.location;\n  const query = new URLSearchParams(search).get('s');\n  const repos1 = GetRepos();\n  console.log(repos1)\n  // const filteredRepos = filterRepos(GetRepos(), query);\n  console.log(filteredRepos);\n  return (\n    <div>\n      <h2>Repositories ðŸš€</h2>\n      < SearchBar />\n      < RepositoriesList />\n    </div>\n  );\n};\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n// 1. Fetch info from API and organize (Fri morning)\n// 2. Implement Search Function and figure out what user is in: maybe a form? (Fri evening)\n// 3. Front end (Fri evening, Sat morning)\n// 4. Testing with an existing user, nonexisting user, and repos found and not found (Sat morning)\n// 5. Write README (Sun morning)\n// 6. Heroku (Sun morning)\n"]},"metadata":{},"sourceType":"module"}