{"ast":null,"code":"var _jsxFileName = \"/Users/tingting/code/tin2294/repository-search/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport './App.css'; // import SearchPage from './SearchPage';\n\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql, createHttpLink } from \"@apollo/client\";\nimport { setContext } from '@apollo/client/link/context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst httpLink = createHttpLink({\n  uri: 'https://api.github.com/graphql'\n});\nconst authLink = setContext((_, _ref) => {\n  let {\n    headers\n  } = _ref;\n  return {\n    headers: { ...headers,\n      authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN}`\n    }\n  };\n});\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n}); // const client = new ApolloClient({\n//   uri: 'https://48p1r2roz4.sse.codesandbox.io',\n//   cache: new InMemoryCache()\n// });\n\nconst {\n  data\n} = await client.query({\n  query: gql`\n    {\n      user(login: \"colbyfayock\") {\n        pinnedItems(first: 6) {\n          totalCount\n          edges {\n            node {\n              ... on Repository {\n                name\n                id\n                url\n                stargazers {\n                  totalCount\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `\n});\nconst {\n  user\n} = data;\nconst pinnedItems = user.pinnedItems.edges.map(edge => edge.node);\nconsole.log('pinnedItems', pinnedItems);\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"props: \", pinnedItems, /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My first Apollo app \\uD83D\\uDE80\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\n;\nReactDOM.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 82,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals(); // 1. Fetch info from API and organize (Fri morning)\n// 2. Implement Search Function and figure out what user is in: maybe a form? (Fri evening)\n// 3. Front end (Fri evening, Sat morning)\n// 4. Testing with an existing user, nonexisting user, and repos found and not found (Sat morning)\n// 5. Write README (Sun morning)\n// 6. Heroku (Sun morning)\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tingting/code/tin2294/repository-search/src/index.js"],"names":["React","ReactDOM","reportWebVitals","ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","createHttpLink","setContext","httpLink","uri","authLink","_","headers","authorization","process","env","GITHUB_ACCESS_TOKEN","client","link","concat","cache","data","query","user","pinnedItems","edges","map","edge","node","console","log","App","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAO,WAAP,C,CACA;;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,GALF,EAMEC,cANF,QAOO,gBAPP;AAQA,SAASC,UAAT,QAA2B,6BAA3B;;AAEA,MAAMC,QAAQ,GAAGF,cAAc,CAAC;AAC9BG,EAAAA,GAAG,EAAE;AADyB,CAAD,CAA/B;AAIA,MAAMC,QAAQ,GAAGH,UAAU,CAAC,CAACI,CAAD,WAAoB;AAAA,MAAhB;AAAEC,IAAAA;AAAF,GAAgB;AAC9C,SAAO;AACLA,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPC,MAAAA,aAAa,EAAG,UAASC,OAAO,CAACC,GAAR,CAAYC,mBAAoB;AAFlD;AADJ,GAAP;AAMD,CAP0B,CAA3B;AASA,MAAMC,MAAM,GAAG,IAAIhB,YAAJ,CAAiB;AAC9BiB,EAAAA,IAAI,EAAER,QAAQ,CAACS,MAAT,CAAgBX,QAAhB,CADwB;AAE9BY,EAAAA,KAAK,EAAE,IAAIlB,aAAJ;AAFuB,CAAjB,CAAf,C,CAKA;AACA;AACA;AACA;;AAEA,MAAM;AAAEmB,EAAAA;AAAF,IAAW,MAAMJ,MAAM,CAACK,KAAP,CAAa;AAClCA,EAAAA,KAAK,EAAEjB,GAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBoC,CAAb,CAAvB;AAwBA,MAAM;AAAEkB,EAAAA;AAAF,IAAWF,IAAjB;AACA,MAAMG,WAAW,GAAGD,IAAI,CAACC,WAAL,CAAiBC,KAAjB,CAAuBC,GAAvB,CAA2BC,IAAI,IAAIA,IAAI,CAACC,IAAxC,CAApB;AACAC,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BN,WAA3B;;AAGA,SAASO,GAAT,GAAe;AACb,sBACE;AAAA,0BAEIP,WAFJ,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;KATQO,G;AASR;AAGDhC,QAAQ,CAACiC,MAAT,eACE,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEf,MAAxB;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEgB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAOA;AACA;AACA;;AACAlC,eAAe,G,CAGf;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport './App.css';\n// import SearchPage from './SearchPage';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql,\n  createHttpLink\n} from \"@apollo/client\";\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({\n  uri: 'https://api.github.com/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN}`,\n    }\n  }\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\n// const client = new ApolloClient({\n//   uri: 'https://48p1r2roz4.sse.codesandbox.io',\n//   cache: new InMemoryCache()\n// });\n\nconst { data } = await client.query({\n  query: gql`\n    {\n      user(login: \"colbyfayock\") {\n        pinnedItems(first: 6) {\n          totalCount\n          edges {\n            node {\n              ... on Repository {\n                name\n                id\n                url\n                stargazers {\n                  totalCount\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `\n});\n\nconst { user } = data;\nconst pinnedItems = user.pinnedItems.edges.map(edge => edge.node);\nconsole.log('pinnedItems', pinnedItems);\n\n\nfunction App() {\n  return (\n    <div>\n      props: {\n        pinnedItems\n      }\n      <h2>My first Apollo app ðŸš€</h2>\n    </div>\n  );\n};\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n// 1. Fetch info from API and organize (Fri morning)\n// 2. Implement Search Function and figure out what user is in: maybe a form? (Fri evening)\n// 3. Front end (Fri evening, Sat morning)\n// 4. Testing with an existing user, nonexisting user, and repos found and not found (Sat morning)\n// 5. Write README (Sun morning)\n// 6. Heroku (Sun morning)\n"]},"metadata":{},"sourceType":"module"}