{"ast":null,"code":"var _jsxFileName = \"/Users/tingting/code/tin2294/repository-search/src/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { useState } from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport SearchBar from './Search';\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Connecting to the GitHub v4 API\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst token = process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN;\nconst client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  cache: new InMemoryCache(),\n  headers: {\n    authorization: `Bearer ${token}`\n  }\n}); // GraphQL query in order to get repositories from the API\n\nconst GET_REPOSITORIES = gql`\n   query repositories {\n    viewer {\n        login\n        repositories(first: 50) {\n            edges {\n                node {\n                name\n                }\n            }\n        }\n    }\n}\n`; // GraphQL query in order to get the logged in user's avatar url\n\nconst GET_AVATAR = gql`\n  query GetAbout {\n    viewer {\n        id\n        name\n        bio\n        avatarUrl\n        location\n        url\n        status {\n          emojiHTML\n          message\n        }\n        company\n      }\n    }\n`; // function to execute the avatar query and get the png url\n\nfunction GetAvatar() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_AVATAR);\n  if (loading) return;\n  if (error) return;\n  return (// `${data.user.avatarUrl}.png`\n    data.name\n  );\n}\n\n_s(GetAvatar, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = GetAvatar;\n; // filterRepos filters the full list of repositories based on the search term (query)\n// it returns an array with the names of the repositories\n\nconst filterRepos = (repos, query) => {\n  if (!query) {\n    return repos;\n  }\n\n  const finalRepos = repos && repos.filter(repo => {\n    const repoName = repo.name.toLowerCase();\n    return repoName.includes(query);\n  });\n  return finalRepos;\n}; // GetRepos performs the GQL query GET_REPOSITORIES and returns the information\n// from the query to the API.\n\n\nfunction GetRepos() {\n  _s2();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_REPOSITORIES);\n  if (loading) return;\n  if (error) return;\n  var repos = data.viewer.repositories.edges.map(_ref => {\n    let {\n      node\n    } = _ref;\n    return {\n      name: node.name\n    };\n  });\n  return repos;\n}\n\n_s2(GetRepos, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c2 = GetRepos;\n; // Main App rendered in the body of the HTML\n\nfunction App() {\n  _s3();\n\n  // retrieve the search term from the url\n  const {\n    search\n  } = window.location;\n  const query = new URLSearchParams(search).get('s'); // get results as we type on the searchbar\n\n  const [searchQuery, setSearchQuery] = useState(query || ''); // call the filterRepos function that filters all the repositories called by\n  // GetRepos based on the search term that searchQuery gets\n\n  const filteredRepos = filterRepos(GetRepos(), searchQuery); // calling the avatar function\n\n  const avatar = GetAvatar();\n  console.log(avatar);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"My Repositories \\uD83D\\uDE80\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        searchQuery: searchQuery,\n        setSearchQuery: setSearchQuery\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"repo-list container-cards\",\n      children: filteredRepos && filteredRepos.map(repo => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: repo.name\n      }, repo.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 53\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(App, \"pXXt52WI/stnZiWWbi60P0ok4qk=\");\n\n_c3 = App;\n;\nReactDOM.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 147,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals(); // [X] 1. Front end -> cards per repo (1-2pm)\n// [X] 2. Token situation (2-3pm)\n// [X] 3. Heroku (Sun morning) (4:30-5:30pm)\n// [X] 4. Write README & Pseudocode (Sun morning) (5:30-6pm)\n// [X] 5. Responsiveness\n// [X] 6. Testing with an existing user, nonexisting user,\n//        and repos found and not found (Sat morning) (6-8:30pm)\n// [ ] 7. Refactor code & finish README\n// [X] 8. Avatar of user (8:30-9:30pm)\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"GetAvatar\");\n$RefreshReg$(_c2, \"GetRepos\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/tingting/code/tin2294/repository-search/src/index.js"],"names":["React","ReactDOM","useState","reportWebVitals","SearchBar","ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","token","process","env","REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN","client","uri","cache","headers","authorization","GET_REPOSITORIES","GET_AVATAR","GetAvatar","loading","error","data","name","filterRepos","repos","query","finalRepos","filter","repo","repoName","toLowerCase","includes","GetRepos","viewer","repositories","edges","map","node","App","search","window","location","URLSearchParams","get","searchQuery","setSearchQuery","filteredRepos","avatar","console","log","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { useState } from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport SearchBar from './Search';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql,\n} from \"@apollo/client\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n// Connecting to the GitHub v4 API\nconst token = process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN;\n\nconst client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  cache: new InMemoryCache(),\n  headers: {\n    authorization: `Bearer ${token}`\n  }\n});\n\n\n// GraphQL query in order to get repositories from the API\nconst GET_REPOSITORIES = gql`\n   query repositories {\n    viewer {\n        login\n        repositories(first: 50) {\n            edges {\n                node {\n                name\n                }\n            }\n        }\n    }\n}\n`;\n\n// GraphQL query in order to get the logged in user's avatar url\nconst GET_AVATAR = gql`\n  query GetAbout {\n    viewer {\n        id\n        name\n        bio\n        avatarUrl\n        location\n        url\n        status {\n          emojiHTML\n          message\n        }\n        company\n      }\n    }\n`;\n\n\n// function to execute the avatar query and get the png url\nfunction GetAvatar() {\n  const { loading, error, data } = useQuery(GET_AVATAR);\n  if (loading) return;\n  if (error) return;\n  return (\n    // `${data.user.avatarUrl}.png`\n    data.name\n  );\n};\n\n\n\n\n// filterRepos filters the full list of repositories based on the search term (query)\n// it returns an array with the names of the repositories\nconst filterRepos = (repos, query) => {\n  if (!query) {\n    return repos;\n  }\n  const finalRepos = repos && repos.filter((repo) => {\n    const repoName = repo.name.toLowerCase();\n    return repoName.includes(query);\n  });\n  return finalRepos ;\n};\n\n\n// GetRepos performs the GQL query GET_REPOSITORIES and returns the information\n// from the query to the API.\nfunction GetRepos() {\n  const { loading, error, data } = useQuery(GET_REPOSITORIES);\n  if (loading) return;\n  if (error) return;\n  var repos = data.viewer.repositories.edges.map(({ node }) => (\n    { name: node.name }\n  ));\n  return (\n    repos\n  );\n};\n\n\n// Main App rendered in the body of the HTML\nfunction App() {\n  // retrieve the search term from the url\n  const { search } = window.location;\n  const query = new URLSearchParams(search).get('s');\n\n  // get results as we type on the searchbar\n  const [searchQuery, setSearchQuery] = useState(query || '');\n\n  // call the filterRepos function that filters all the repositories called by\n  // GetRepos based on the search term that searchQuery gets\n  const filteredRepos = filterRepos(GetRepos(), searchQuery);\n\n  // calling the avatar function\n  const avatar = GetAvatar();\n  console.log(avatar);\n\n  return (\n    <div>\n      <div className=\"upper\">\n        {/* <img class=\"avatar-large\" alt=\"avatar-large\" src={avatar} /> */}\n        <div className=\"title\">\n          <h2>My Repositories 🚀\n          </h2>\n        </div>\n        < SearchBar\n          searchQuery={searchQuery}\n          setSearchQuery={setSearchQuery}\n        />\n      </div>\n      <div className=\"repo-list container-cards\">\n        {filteredRepos && filteredRepos.map(repo => <div className=\"card\" key={repo.name}>{repo.name}</div>)}\n      </div>\n    </div>\n  );\n};\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// [X] 1. Front end -> cards per repo (1-2pm)\n// [X] 2. Token situation (2-3pm)\n// [X] 3. Heroku (Sun morning) (4:30-5:30pm)\n// [X] 4. Write README & Pseudocode (Sun morning) (5:30-6pm)\n// [X] 5. Responsiveness\n// [X] 6. Testing with an existing user, nonexisting user,\n//        and repos found and not found (Sat morning) (6-8:30pm)\n// [ ] 7. Refactor code & finish README\n// [X] 8. Avatar of user (8:30-9:30pm)\n"]},"metadata":{},"sourceType":"module"}