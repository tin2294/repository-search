{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport PropTypes from 'prop-types';\nimport createConnector from \"../core/createConnector.js\";\n/**\n * connectCurrentRefinements connector provides the logic to build a widget that will\n * give the user the ability to remove all or some of the filters that were\n * set.\n * @name connectCurrentRefinements\n * @kind connector\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @propType {function} [clearsQuery=false] - Pass true to also clear the search query\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {array.<{label: string, attribute: string, currentRefinement: string || object, items: array, value: function}>} items - all the filters, the `value` is to pass to the `refine` function for removing all currentrefinements, `label` is for the display. When existing several refinements for the same atribute name, then you get a nested `items` object that contains a `label` and a `value` function to use to remove a single filter. `attribute` and `currentRefinement` are metadata containing row values.\n * @providedPropType {string} query - the search query\n */\n\nexport default createConnector({\n  displayName: 'AlgoliaCurrentRefinements',\n  propTypes: {\n    transformItems: PropTypes.func\n  },\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults, metadata) {\n    var items = metadata.reduce(function (res, meta) {\n      if (typeof meta.items !== 'undefined') {\n        if (!props.clearsQuery && meta.id === 'query') {\n          return res;\n        } else {\n          if (props.clearsQuery && meta.id === 'query' && meta.items[0].currentRefinement === '') {\n            return res;\n          }\n\n          return res.concat(meta.items.map(function (item) {\n            return _objectSpread(_objectSpread({}, item), {}, {\n              id: meta.id,\n              index: meta.index\n            });\n          }));\n        }\n      }\n\n      return res;\n    }, []);\n    var transformedItems = props.transformItems ? props.transformItems(items) : items;\n    return {\n      items: transformedItems,\n      canRefine: transformedItems.length > 0\n    };\n  },\n  refine: function refine(props, searchState, items) {\n    // `value` corresponds to our internal clear function computed in each connector metadata.\n    var refinementsToClear = items instanceof Array ? items.map(function (item) {\n      return item.value;\n    }) : [items];\n    return refinementsToClear.reduce(function (res, clear) {\n      return clear(res);\n    }, searchState);\n  }\n});","map":{"version":3,"sources":["/Users/tingting/code/tin2294/repository-search/node_modules/react-instantsearch-core/dist/es/connectors/connectCurrentRefinements.js"],"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","PropTypes","createConnector","displayName","propTypes","transformItems","func","getProvidedProps","props","searchState","searchResults","metadata","items","reduce","res","meta","clearsQuery","id","currentRefinement","concat","map","item","index","transformedItems","canRefine","refine","refinementsToClear","Array","value","clear"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport PropTypes from 'prop-types';\nimport createConnector from \"../core/createConnector.js\";\n/**\n * connectCurrentRefinements connector provides the logic to build a widget that will\n * give the user the ability to remove all or some of the filters that were\n * set.\n * @name connectCurrentRefinements\n * @kind connector\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @propType {function} [clearsQuery=false] - Pass true to also clear the search query\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {array.<{label: string, attribute: string, currentRefinement: string || object, items: array, value: function}>} items - all the filters, the `value` is to pass to the `refine` function for removing all currentrefinements, `label` is for the display. When existing several refinements for the same atribute name, then you get a nested `items` object that contains a `label` and a `value` function to use to remove a single filter. `attribute` and `currentRefinement` are metadata containing row values.\n * @providedPropType {string} query - the search query\n */\n\nexport default createConnector({\n  displayName: 'AlgoliaCurrentRefinements',\n  propTypes: {\n    transformItems: PropTypes.func\n  },\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults, metadata) {\n    var items = metadata.reduce(function (res, meta) {\n      if (typeof meta.items !== 'undefined') {\n        if (!props.clearsQuery && meta.id === 'query') {\n          return res;\n        } else {\n          if (props.clearsQuery && meta.id === 'query' && meta.items[0].currentRefinement === '') {\n            return res;\n          }\n\n          return res.concat(meta.items.map(function (item) {\n            return _objectSpread(_objectSpread({}, item), {}, {\n              id: meta.id,\n              index: meta.index\n            });\n          }));\n        }\n      }\n\n      return res;\n    }, []);\n    var transformedItems = props.transformItems ? props.transformItems(items) : items;\n    return {\n      items: transformedItems,\n      canRefine: transformedItems.length > 0\n    };\n  },\n  refine: function refine(props, searchState, items) {\n    // `value` corresponds to our internal clear function computed in each connector metadata.\n    var refinementsToClear = items instanceof Array ? items.map(function (item) {\n      return item.value;\n    }) : [items];\n    return refinementsToClear.reduce(function (res, clear) {\n      return clear(res);\n    }, searchState);\n  }\n});"]},"metadata":{},"sourceType":"module"}