{"ast":null,"code":"var _jsxFileName = \"/Users/tingting/code/tin2294/repository-search/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport './App.css';\nimport App from './App';\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Connecting to the GitHub v4 API\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst token = process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN;\nconst client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  cache: new InMemoryCache(),\n  headers: {\n    authorization: `Bearer ${token}`\n  }\n}); // GraphQL query in order to get repositories from the API\n\nconst GET_REPOSITORIES = gql`\n   query repositories {\n    viewer {\n        login\n        repositories(first: 50) {\n            edges {\n                node {\n                name\n                }\n            }\n        }\n    }\n}\n`; // filterRepos filters the full list of repositories based on the search term (query)\n// it returns an array with the names of the repositories\n\nconst filterRepos = (repos, query) => {\n  if (!query) {\n    return repos;\n  }\n\n  const finalRepos = repos && repos.filter(repo => {\n    const repoName = repo.name.toLowerCase();\n    return repoName.includes(query);\n  });\n  return finalRepos;\n}; // GetRepos performs the GQL query GET_REPOSITORIES and returns the information\n// from the query to the API.\n\n\nfunction GetRepos() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_REPOSITORIES);\n  if (loading) return;\n  if (error) return;\n  var repos = data.viewer.repositories.edges.map(_ref => {\n    let {\n      node\n    } = _ref;\n    return {\n      name: node.name\n    };\n  });\n  return repos;\n}\n\n_s(GetRepos, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = GetRepos;\n;\nReactDOM.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 76,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals(); // [X] 1. Front end -> cards per repo (1-2pm)\n// [X] 2. Token situation (2-3pm)\n// [X] 3. Heroku (Sun morning) (4:30-5:30pm)\n// [X] 4. Write README & Pseudocode (Sun morning) (5:30-6pm)\n// [X] 5. Responsiveness\n// [ ] 6. Testing with an existing user, nonexisting user,\n//        and repos found and not found (Sat morning) (6-8:30pm)\n// [ ] 7. Refactor code & finish README\n// [ ] 8. Avatar of user (8:30-9:30pm)\n// [ ] 9. More Repo info\n\nvar _c;\n\n$RefreshReg$(_c, \"GetRepos\");","map":{"version":3,"sources":["/Users/tingting/code/tin2294/repository-search/src/index.js"],"names":["React","ReactDOM","reportWebVitals","App","ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","token","process","env","REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN","client","uri","cache","headers","authorization","GET_REPOSITORIES","filterRepos","repos","query","finalRepos","filter","repo","repoName","name","toLowerCase","includes","GetRepos","loading","error","data","viewer","repositories","edges","map","node","render","document","getElementById"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,GALF,QAMO,gBANP;AAOA,OAAO,sCAAP,C,CAGA;;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYC,sCAA1B;AAEA,MAAMC,MAAM,GAAG,IAAIT,YAAJ,CAAiB;AAC9BU,EAAAA,GAAG,EAAE,gCADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIV,aAAJ,EAFuB;AAG9BW,EAAAA,OAAO,EAAE;AACPC,IAAAA,aAAa,EAAG,UAASR,KAAM;AADxB;AAHqB,CAAjB,CAAf,C,CASA;;AACA,MAAMS,gBAAgB,GAAGV,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA,C,CAgBA;AACA;;AACA,MAAMW,WAAW,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACpC,MAAI,CAACA,KAAL,EAAY;AACV,WAAOD,KAAP;AACD;;AACD,QAAME,UAAU,GAAGF,KAAK,IAAIA,KAAK,CAACG,MAAN,CAAcC,IAAD,IAAU;AACjD,UAAMC,QAAQ,GAAGD,IAAI,CAACE,IAAL,CAAUC,WAAV,EAAjB;AACA,WAAOF,QAAQ,CAACG,QAAT,CAAkBP,KAAlB,CAAP;AACD,GAH2B,CAA5B;AAIA,SAAOC,UAAP;AACD,CATD,C,CAYA;AACA;;;AACA,SAASO,QAAT,GAAoB;AAAA;;AAClB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BzB,QAAQ,CAACW,gBAAD,CAAzC;AACA,MAAIY,OAAJ,EAAa;AACb,MAAIC,KAAJ,EAAW;AACX,MAAIX,KAAK,GAAGY,IAAI,CAACC,MAAL,CAAYC,YAAZ,CAAyBC,KAAzB,CAA+BC,GAA/B,CAAmC;AAAA,QAAC;AAAEC,MAAAA;AAAF,KAAD;AAAA,WAC7C;AAAEX,MAAAA,IAAI,EAAEW,IAAI,CAACX;AAAb,KAD6C;AAAA,GAAnC,CAAZ;AAGA,SACEN,KADF;AAGD;;GAVQS,Q;UAC0BtB,Q;;;KAD1BsB,Q;AAUR;AAGD5B,QAAQ,CAACqC,MAAT,eACE,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEzB,MAAxB;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIE0B,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAOA;AACA;AACA;;AACAtC,eAAe,G,CAGf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport './App.css';\nimport App from './App';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql,\n} from \"@apollo/client\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n// Connecting to the GitHub v4 API\nconst token = process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN;\n\nconst client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  cache: new InMemoryCache(),\n  headers: {\n    authorization: `Bearer ${token}`\n  }\n});\n\n\n// GraphQL query in order to get repositories from the API\nconst GET_REPOSITORIES = gql`\n   query repositories {\n    viewer {\n        login\n        repositories(first: 50) {\n            edges {\n                node {\n                name\n                }\n            }\n        }\n    }\n}\n`;\n\n\n// filterRepos filters the full list of repositories based on the search term (query)\n// it returns an array with the names of the repositories\nconst filterRepos = (repos, query) => {\n  if (!query) {\n    return repos;\n  }\n  const finalRepos = repos && repos.filter((repo) => {\n    const repoName = repo.name.toLowerCase();\n    return repoName.includes(query);\n  });\n  return finalRepos ;\n};\n\n\n// GetRepos performs the GQL query GET_REPOSITORIES and returns the information\n// from the query to the API.\nfunction GetRepos() {\n  const { loading, error, data } = useQuery(GET_REPOSITORIES);\n  if (loading) return;\n  if (error) return;\n  var repos = data.viewer.repositories.edges.map(({ node }) => (\n    { name: node.name }\n  ));\n  return (\n    repos\n  );\n};\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n// [X] 1. Front end -> cards per repo (1-2pm)\n// [X] 2. Token situation (2-3pm)\n// [X] 3. Heroku (Sun morning) (4:30-5:30pm)\n// [X] 4. Write README & Pseudocode (Sun morning) (5:30-6pm)\n// [X] 5. Responsiveness\n// [ ] 6. Testing with an existing user, nonexisting user,\n//        and repos found and not found (Sat morning) (6-8:30pm)\n// [ ] 7. Refactor code & finish README\n// [ ] 8. Avatar of user (8:30-9:30pm)\n// [ ] 9. More Repo info\n"]},"metadata":{},"sourceType":"module"}