{"ast":null,"code":"var _jsxFileName = \"/Users/tingting/code/tin2294/repository-search/src/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { useState } from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport './App.css';\nimport SearchBar from './search';\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  cache: new InMemoryCache(),\n  headers: {\n    authorization: `Bearer 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`\n  }\n});\nconst GET_REPOSITORIES = gql`\n   query repositories {\n    viewer {\n        login\n        repositories(first: 30) {\n            edges {\n                node {\n                name\n                }\n            }\n        }\n    }\n}\n`;\n\nconst filterRepos = (repos, query) => {\n  if (!query) {\n    return repos;\n  }\n\n  const finalRepos = repos && repos.filter(repo => {\n    const repoName = repo.name.toLowerCase();\n    return repoName.includes(query);\n  });\n  return finalRepos;\n};\n\nfunction GetRepos() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_REPOSITORIES);\n  if (loading) return;\n  if (error) return;\n  var repos = data.viewer.repositories.edges.map(_ref => {\n    let {\n      node\n    } = _ref;\n    return {\n      name: node.name\n    };\n  });\n  return repos;\n}\n\n_s(GetRepos, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = GetRepos;\n;\n\nfunction App() {\n  _s2();\n\n  const {\n    search\n  } = window.location;\n  const query = new URLSearchParams(search).get('s');\n  const repos1 = GetRepos();\n  const [searchQuery, setSearchQuery] = useState(query || '');\n  const filteredRepos = filterRepos(repos1, searchQuery);\n  console.log(filteredRepos);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"My Repositories \\uD83D\\uDE80\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        searchQuery: searchQuery,\n        setSearchQuery: setSearchQuery\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"repo-list\",\n      children: filteredRepos && filteredRepos.map(repo => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: repo.name\n      }, repo.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 53\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"pXXt52WI/stnZiWWbi60P0ok4qk=\");\n\n_c2 = App;\n;\nReactDOM.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 92,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals(); // 1. Fetch info from API and organize (Fri morning)\n// 2. Implement Search Function and figure out what user is in: maybe a form? (Fri evening)\n// 3. Front end (Fri evening, Sat morning)\n// 4. Testing with an existing user, nonexisting user, and repos found and not found (Sat morning)\n// 5. Write README (Sun morning)\n// 6. Heroku (Sun morning)\n// 7. Avatar of user\n// 8. More Repo info\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GetRepos\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/tingting/code/tin2294/repository-search/src/index.js"],"names":["React","ReactDOM","useState","reportWebVitals","SearchBar","ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","client","uri","cache","headers","authorization","GET_REPOSITORIES","filterRepos","repos","query","finalRepos","filter","repo","repoName","name","toLowerCase","includes","GetRepos","loading","error","data","viewer","repositories","edges","map","node","App","search","window","location","URLSearchParams","get","repos1","searchQuery","setSearchQuery","filteredRepos","console","log","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { useState } from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport './App.css';\nimport SearchBar from './search';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql,\n} from \"@apollo/client\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  cache: new InMemoryCache(),\n  headers: {\n    authorization: `Bearer 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`\n  }\n});\n\nconst GET_REPOSITORIES = gql`\n   query repositories {\n    viewer {\n        login\n        repositories(first: 30) {\n            edges {\n                node {\n                name\n                }\n            }\n        }\n    }\n}\n`;\n\n\nconst filterRepos = (repos, query) => {\n  if (!query) {\n    return repos;\n  }\n  const finalRepos = repos && repos.filter((repo) => {\n    const repoName = repo.name.toLowerCase();\n    return repoName.includes(query);\n  });\n  return finalRepos ;\n};\n\n\nfunction GetRepos() {\n  const { loading, error, data } = useQuery(GET_REPOSITORIES);\n  if (loading) return;\n  if (error) return;\n  var repos = data.viewer.repositories.edges.map(({ node }) => (\n    { name: node.name }\n  ));\n  return (\n    repos\n  );\n};\n\n\nfunction App() {\n  const { search } = window.location;\n  const query = new URLSearchParams(search).get('s');\n  const repos1 = GetRepos();\n  const [searchQuery, setSearchQuery] = useState(query || '');\n  const filteredRepos = filterRepos(repos1, searchQuery);\n  console.log(filteredRepos);\n  return (\n    <div>\n      <div className=\"upper\">\n        <h2>My Repositories ðŸš€</h2>\n        < SearchBar\n          searchQuery={searchQuery}\n          setSearchQuery={setSearchQuery}\n        />\n      </div>\n      <div className=\"repo-list\">\n        {filteredRepos && filteredRepos.map(repo => <div key={repo.name}>{repo.name}</div>)}\n      </div>\n    </div>\n  );\n};\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n// 1. Fetch info from API and organize (Fri morning)\n// 2. Implement Search Function and figure out what user is in: maybe a form? (Fri evening)\n// 3. Front end (Fri evening, Sat morning)\n// 4. Testing with an existing user, nonexisting user, and repos found and not found (Sat morning)\n// 5. Write README (Sun morning)\n// 6. Heroku (Sun morning)\n// 7. Avatar of user\n// 8. More Repo info\n"]},"metadata":{},"sourceType":"module"}