{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport PropTypes from 'prop-types';\nimport createConnector from \"../core/createConnector.js\";\nimport { cleanUpValue, refineValue, getCurrentRefinementValue } from \"../core/indexUtils.js\";\n\nfunction getId() {\n  return 'hitsPerPage';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId();\n  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, null);\n\n  if (typeof currentRefinement === 'string') {\n    return parseInt(currentRefinement, 10);\n  }\n\n  return currentRefinement;\n}\n/**\n * connectHitsPerPage connector provides the logic to create connected\n * components that will allow a user to choose to display more or less results from Algolia.\n * @name connectHitsPerPage\n * @kind connector\n * @propType {number} defaultRefinement - The number of items selected by default\n * @propType {{value: number, label: string}[]} items - List of hits per page options.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{isRefined: boolean, label?: string, value: number}>} items - the list of items the HitsPerPage can display. If no label provided, the value will be displayed.\n */\n\n\nexport default createConnector({\n  displayName: 'AlgoliaHitsPerPage',\n  propTypes: {\n    defaultRefinement: PropTypes.number.isRequired,\n    items: PropTypes.arrayOf(PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.number.isRequired\n    })).isRequired,\n    transformItems: PropTypes.func\n  },\n  getProvidedProps: function getProvidedProps(props, searchState) {\n    var currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    var items = props.items.map(function (item) {\n      return item.value === currentRefinement ? _objectSpread(_objectSpread({}, item), {}, {\n        isRefined: true\n      }) : _objectSpread(_objectSpread({}, item), {}, {\n        isRefined: false\n      });\n    });\n    return {\n      items: props.transformItems ? props.transformItems(items) : items,\n      currentRefinement: currentRefinement\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    var id = getId();\n\n    var nextValue = _defineProperty({}, id, nextRefinement);\n\n    var resetPage = true;\n    return refineValue(searchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }, resetPage);\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return cleanUpValue(searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }, getId());\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setHitsPerPage(getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }));\n  },\n  getMetadata: function getMetadata() {\n    return {\n      id: getId()\n    };\n  }\n});","map":{"version":3,"sources":["/Users/tingting/code/tin2294/repository-search/node_modules/react-instantsearch-core/dist/es/connectors/connectHitsPerPage.js"],"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","PropTypes","createConnector","cleanUpValue","refineValue","getCurrentRefinementValue","getId","getCurrentRefinement","props","searchState","context","id","currentRefinement","parseInt","displayName","propTypes","defaultRefinement","number","isRequired","items","arrayOf","shape","label","string","value","transformItems","func","getProvidedProps","ais","contextValue","multiIndexContext","indexContextValue","map","item","isRefined","refine","nextRefinement","nextValue","resetPage","cleanUp","getSearchParameters","searchParameters","setHitsPerPage","getMetadata"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport PropTypes from 'prop-types';\nimport createConnector from \"../core/createConnector.js\";\nimport { cleanUpValue, refineValue, getCurrentRefinementValue } from \"../core/indexUtils.js\";\n\nfunction getId() {\n  return 'hitsPerPage';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId();\n  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, null);\n\n  if (typeof currentRefinement === 'string') {\n    return parseInt(currentRefinement, 10);\n  }\n\n  return currentRefinement;\n}\n/**\n * connectHitsPerPage connector provides the logic to create connected\n * components that will allow a user to choose to display more or less results from Algolia.\n * @name connectHitsPerPage\n * @kind connector\n * @propType {number} defaultRefinement - The number of items selected by default\n * @propType {{value: number, label: string}[]} items - List of hits per page options.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{isRefined: boolean, label?: string, value: number}>} items - the list of items the HitsPerPage can display. If no label provided, the value will be displayed.\n */\n\n\nexport default createConnector({\n  displayName: 'AlgoliaHitsPerPage',\n  propTypes: {\n    defaultRefinement: PropTypes.number.isRequired,\n    items: PropTypes.arrayOf(PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.number.isRequired\n    })).isRequired,\n    transformItems: PropTypes.func\n  },\n  getProvidedProps: function getProvidedProps(props, searchState) {\n    var currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    var items = props.items.map(function (item) {\n      return item.value === currentRefinement ? _objectSpread(_objectSpread({}, item), {}, {\n        isRefined: true\n      }) : _objectSpread(_objectSpread({}, item), {}, {\n        isRefined: false\n      });\n    });\n    return {\n      items: props.transformItems ? props.transformItems(items) : items,\n      currentRefinement: currentRefinement\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    var id = getId();\n\n    var nextValue = _defineProperty({}, id, nextRefinement);\n\n    var resetPage = true;\n    return refineValue(searchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }, resetPage);\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return cleanUpValue(searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }, getId());\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setHitsPerPage(getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }));\n  },\n  getMetadata: function getMetadata() {\n    return {\n      id: getId()\n    };\n  }\n});"]},"metadata":{},"sourceType":"module"}